package nl.tudelft.serg.evosql.brew.db;

import lombok.Getter;
import lombok.NonNull;
import lombok.Setter;
import nl.tudelft.serg.evosql.EvoSQL;
import nl.tudelft.serg.evosql.PathResult;
import nl.tudelft.serg.evosql.brew.data.*;

import java.util.HashMap;
import java.util.stream.Collectors;

/**
 * A class for obtaining test fixtures from a database, using the
 * EvoSQL algorithm from the GA package.
 */
public class EvoSQLRunner implements QueryRunner {

    /**
     * The EvoSQL class factory used.
     */
    @Getter
    @Setter
    @NonNull
    private EvoSQLFactory evoSQLFactory = new EvoSQLFactory();

    /**
     * Returns test data fixtures for the given SQL query, as
     * generated by the EvoSQL algorithm.
     *
     * @param sqlQuery       The SQL query to generate fixtures for.
     * @param connectionData The database connection data.
     * @return A list of fixtures for the given SQL query,
     * generated by the EvoSQL algorithm.
     */
    @Override
    public Result runQuery(@NonNull String sqlQuery, @NonNull ConnectionData connectionData) {
        EvoSQL evoSQL = evoSQLFactory.createEvoSQL(connectionData);
        nl.tudelft.serg.evosql.Result evoSQLResult = evoSQL.execute(sqlQuery);
        return convertResult(evoSQLResult);
    }

    Result convertResult(nl.tudelft.serg.evosql.Result evoSqlResult) {
        return new Result(
                evoSqlResult.getInputQuery(),
                evoSqlResult.getPathResults().stream().map(this::convertPathResult).collect(Collectors.toList())
        );
    }

    private Path convertPathResult(PathResult pathResult) {
        return new Path(
                convertFixture(pathResult.getFixture()),
                pathResult.getPathSql(),
                pathResult.getPathNo(),
                pathResult.isSuccess()
        );
    }

    private Fixture convertFixture(nl.tudelft.serg.evosql.fixture.Fixture evoSqlFixture) {
        return new Fixture(
                evoSqlFixture.getTables().stream().map(this::convertFixtureTable).collect(Collectors.toList())
        );
    }

    private FixtureTable convertFixtureTable(nl.tudelft.serg.evosql.fixture.FixtureTable fixtureTable) {
        final TableSchema schema = convertTableSchema(fixtureTable.getSchema());
        return new FixtureTable(
                schema,
                fixtureTable.getRows().stream().map(r -> convertFixtureRow(r, schema)).collect(Collectors.toList())
        );
    }

    private TableSchema convertTableSchema(nl.tudelft.serg.evosql.sql.TableSchema tableSchema) {
        return new TableSchema(
                tableSchema.getName(),
                tableSchema.getColumns().stream()
                        .map(c -> new FixtureColumn(c.getName(), c.getType().getTypeString()))
                        .collect(Collectors.toList())
        );
    }

    private FixtureRow convertFixtureRow(nl.tudelft.serg.evosql.fixture.FixtureRow fixtureRow, TableSchema schema) {
        return new FixtureRow(
                new HashMap<>(fixtureRow.getValues()),
                schema
        );
    }
}
